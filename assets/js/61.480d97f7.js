(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{334:function(t,s,a){"use strict";a.r(s);var e=a(14),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"mysql索引"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql索引"}},[t._v("#")]),t._v(" mysql索引")]),t._v(" "),s("h2",{attrs:{id:"概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),s("p",[t._v("索引用于快速查找具有特定列值的行。如果没有索引，MySQL 必须从第一行开始，然后通读整个表以找到相关的行。表越大，成本越高。如果表中有相关列的索引，MySQL 可以快速确定数据文件中要查找的位置，而无需查看所有数据。这比顺序读取每一行要快得多。")]),t._v(" "),s("h2",{attrs:{id:"mysql-对这些操作使用索引"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql-对这些操作使用索引"}},[t._v("#")]),t._v(" MySQL 对这些操作使用索引")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("查找与 WHERE 条件匹配的行，如 "),s("code",[t._v("WHERE col1 = 1")])])]),t._v(" "),s("li",[s("p",[t._v("如果需要在多个索引之间进行选择 MySQL 通常使用找到最少行数的索引\n这个算是 优化器的内容？")])])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 这会优先使用 sim 索引")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" gps_track  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sim"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("create_time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10001"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2022-01-01 00:00:00"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10001"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2022-01-01 00:00:01"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10002"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2022-01-01 00:00:00"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10003"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2022-01-01 00:00:00"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10004"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2022-01-01 00:00:00"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 这会优先使用 create_time 索引")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" gps_track  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sim"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("create_time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10001"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2022-01-01 00:00:00"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10001"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2022-01-01 00:00:01"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10002"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2022-01-01 00:00:00"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10002"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2022-01-01 00:00:02"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10003"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2022-01-01 00:00:03"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXPLAIN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" gps_track "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" sim "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10001'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" create_time "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2022-01-01 00:00:00"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("分别输出执行计划")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("id|select_type|table    |partitions|type       |possible_keys                            |key                                      |key_len|ref|rows|filtered|Extra                                                                               |\n--+-----------+---------+----------+-----------+-----------------------------------------+-----------------------------------------+-------+---+----+--------+------------------------------------------------------------------------------------+\n 1|SIMPLE     |gps_track|          |index_merge|student_create_time_IDX,gps_track_sim_IDX|gps_track_sim_IDX,student_create_time_IDX|402,5  |   |   1|    62.5|Using intersect(gps_track_sim_IDX,student_create_time_IDX); Using where; Using index|\n\n\n id|select_type|table    |partitions|type       |possible_keys                            |key                                      |key_len|ref|rows|filtered|Extra                                                                               |\n--+-----------+---------+----------+-----------+-----------------------------------------+-----------------------------------------+-------+---+----+--------+------------------------------------------------------------------------------------+\n 1|SIMPLE     |gps_track|          |index_merge|student_create_time_IDX,gps_track_sim_IDX|student_create_time_IDX,gps_track_sim_IDX|5,402  |   |   1|   100.0|Using intersect(student_create_time_IDX,gps_track_sim_IDX); Using where; Using index|\n")])])]),s("ul",[s("li",[s("p",[t._v("如果表具有多列索引，优化器可以使用索引的任何最左前缀来查找行,例如 (col1,col2,col3) 那么我们可以使用 (col1),(col1,col2),(col1,col2,col3)")])]),t._v(" "),s("li",[s("p",[t._v("连表查询的时候，从其他的表中检索行")])]),t._v(" "),s("li",[s("p",[t._v("使用 MIN() MAX() 的时候")])])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("MIN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key_part2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("MAX")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key_part2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" tbl_name "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" key_part1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[s("p",[t._v("当对表进行排序或者分组的时候，如果 排序或者分组 满足索引的最左前缀匹配原则\n例如 有索引 (col1,col2) 组合索引 用 ORDER by col1,col2")])]),t._v(" "),s("li",[s("p",[t._v("在某些情况下，可以对查询进行优化，以便在不查询数据行的情况下检索值")])])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tcol1 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tcol2 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tcol3 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("索引为 (col1,col2)")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" col2 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" student "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" col1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),s("p",[t._v("这样就不会去查询数据行")]),t._v(" "),s("h2",{attrs:{id:"索引前缀"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#索引前缀"}},[t._v("#")]),t._v(" 索引前缀")]),t._v(" "),s("p",[t._v("对字符串列创建索引时，我们可以使用 col_name(N) 语法，创建仅使用该列的前 N 个字符的索引。以这种方式创建的索引文件会小得多。对于 BLOB 或 TEXT 列建立索引时，必须为索引指定前缀长度。")]),t._v(" "),s("h3",{attrs:{id:"最左前缀原则-leftmost-prefix"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最左前缀原则-leftmost-prefix"}},[t._v("#")]),t._v(" 最左前缀原则（leftmost prefix）")]),t._v(" "),s("p",[t._v("MYSQL 的联合索引可以用于包含索引中所有列的查询语句的查询，或者是仅包含第一列，前两列，前三列，等等。如果你在索引定义中以正确的顺序指定列，那么联合索引就可以加快对同一张表的多种不同类型的查询。")]),t._v(" "),s("h3",{attrs:{id:"explain-命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#explain-命令"}},[t._v("#")]),t._v(" EXPLAIN 命令")]),t._v(" "),s("h3",{attrs:{id:"索引合并"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#索引合并"}},[t._v("#")]),t._v(" 索引合并")]),t._v(" "),s("p",[t._v("使用执行计划的时候看到 type = index_merge")]),t._v(" "),s("h3",{attrs:{id:"索引类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#索引类型"}},[t._v("#")]),t._v(" 索引类型")]),t._v(" "),s("ul",[s("li",[t._v("FULLTEXT")]),t._v(" "),s("li",[t._v("NORMAL")]),t._v(" "),s("li",[t._v("SPATIAL")]),t._v(" "),s("li",[t._v("UNIQUE")])]),t._v(" "),s("p",[t._v("一般用的多的就是 NORMAL 和 UNIQUE")]),t._v(" "),s("h3",{attrs:{id:"索引方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#索引方法"}},[t._v("#")]),t._v(" 索引方法")]),t._v(" "),s("ul",[s("li",[t._v("BTREE")]),t._v(" "),s("li",[t._v("HASH")])]),t._v(" "),s("p",[t._v("B 树索引特性")]),t._v(" "),s("p",[t._v("B 树索引可用于使用 = 、 > 、 >= 、 < 、 <= 或 BEWEEN 运算符的表达式中的列比较。如果 LIKE 的参数是一个不以通配符开头的常量字符串，那么也可以使用索引进行 LIKE 比较")]),t._v(" "),s("p",[t._v("使用 col_name IS NULL 的查询在 col_name 上有索引的时候也可以使用索引")]),t._v(" "),s("blockquote",[s("p",[t._v("Any index that does not span all AND levels in the WHERE clause is not used to optimize the query. In other words, to be able to use an index, a prefix of the index must be used in every AND group.")])]),t._v(" "),s("blockquote",[s("p",[t._v("The following WHERE clauses use indexes:")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" index_part1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" index_part2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" other_column"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* index = 1 OR index = 2 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* optimized like \"index_part1='hello'\" */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" index_part1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" index_part3"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Can use index on index1 but not on index2 or index3 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" index1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" index2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v(" index1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" index3"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("These WHERE clauses do not use indexes:")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* index_part1 is not used */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" index_part2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" index_part3"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*  Index is not used in both parts of the WHERE clause  */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* No index spans all rows  */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" index_part1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v(" index_part2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n")])])]),s("h3",{attrs:{id:"explain-执行计划"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#explain-执行计划"}},[t._v("#")]),t._v(" EXPLAIN 执行计划")]),t._v(" "),s("p",[t._v("对于执行计划，参数有：")]),t._v(" "),s("ul",[s("li",[t._v("possible_keys 字段表示可能用到的索引；")]),t._v(" "),s("li",[t._v("key 字段表示实际用的索引，如果这一项为 NULL，说明没有使用索引；")]),t._v(" "),s("li",[t._v("key_len 表示查询用到的索引长度（字节数），原则上长度越短越好；\n"),s("ul",[s("li",[t._v("单列索引，那么需要将整个索引长度算进去；")]),t._v(" "),s("li",[t._v("多列索引，不是所有列都能用到，需要计算查询中实际用到的列。")])])]),t._v(" "),s("li",[t._v("rows 表示扫描的数据行数。")]),t._v(" "),s("li",[t._v("type 表示数据扫描类型。")])]),t._v(" "),s("h4",{attrs:{id:"tpye-数据扫描类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tpye-数据扫描类型"}},[t._v("#")]),t._v(" tpye: 数据扫描类型")]),t._v(" "),s("p",[t._v("常见扫描类型的执行效率从低到高的顺序为：")]),t._v(" "),s("ul",[s("li",[t._v("All（全表扫描）；")]),t._v(" "),s("li",[t._v("index（全索引扫描）；")]),t._v(" "),s("li",[t._v("range（索引范围扫描）；")]),t._v(" "),s("li",[t._v("ref（非唯一索引扫描）；")]),t._v(" "),s("li",[t._v("eq_ref（唯一索引扫描）；")]),t._v(" "),s("li",[t._v("const（结果只有一条的主键或唯一索引扫描）。")])]),t._v(" "),s("p",[t._v("在这些情况里，all 是最坏的情况，因为采用了全表扫描的方式。index 和 all 差不多，只不过 index 对索引表进行全扫描，这样做的好处是不再需要对数据进行排序，但是开销依然很大。所以，要尽量避免全表扫描和全索引扫描。\nrange 表示采用了索引范围扫描，一般在 where 子句中使用 < 、>、in、between 等关键词，只检索给定范围的行，属于范围查找。从这一级别开始，索引的作用会越来越明显，因此我们需要尽量让 SQL 查询可以使用到 range 这一级别及以上的 type 访问方式。")]),t._v(" "),s("p",[t._v("ref 类型表示采用了非唯一索引，或者是唯一索引的非唯一性前缀，返回数据返回可能是多条。因为虽然使用了索引，但该索引列的值并不唯一，有重复。这样即使使用索引快速查找到了第一条数据，仍然不能停止，要进行目标值附近的小范围扫描。但它的好处是它并不需要扫全表，因为索引是有序的，即便有重复值，也是在一个非常小的范围内扫描。")]),t._v(" "),s("p",[t._v("eq_ref 类型是使用主键或唯一索引时产生的访问方式，通常使用在多表联查中。比如，对两张表进行联查，关联条件是两张表的 user_id 相等，且 user_id 是唯一索引，那么使用 EXPLAIN 进行执行计划查看的时候，type 就会显示 eq_ref。")]),t._v(" "),s("p",[t._v("const 类型表示使用了主键或者唯一索引与常量值进行比较，比如 "),s("code",[t._v("select name from product where id = 1")])]),t._v(" "),s("p",[t._v("需要说明的是 const 类型和 eq_ref 都使用了主键或唯一索引，不过这两个类型有所区别，const 是与常量进行比较，查询效率会更快，而 eq_ref 通常用于多表联查中。")]),t._v(" "),s("h4",{attrs:{id:"extra-额外信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#extra-额外信息"}},[t._v("#")]),t._v(" extra: 额外信息")]),t._v(" "),s("ul",[s("li",[t._v("Using filesort ：当查询语句中包含 group by 操作，而且无法利用索引完成排序操作的时候， 这时不得不选择相应的排序算法进行，甚至可能会通过文件排序，效率是很低的，所以要避免这种问题的出现。")]),t._v(" "),s("li",[t._v("Using temporary：使了用临时表保存中间结果，MySQL 在对查询结果排序时使用临时表，常见于排序 order by 和分组查询 group by。效率低，要避免这种问题的出现。")]),t._v(" "),s("li",[t._v("Using index：所需数据只需在索引即可全部获得，不须要再到表中取数据，也就是使用了覆盖索引，避免了回表操作，效率不错。")])]),t._v(" "),s("h3",{attrs:{id:"b-树索引的结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#b-树索引的结构"}},[t._v("#")]),t._v(" B 树索引的结构")]),t._v(" "),s("p",[t._v("参考链接")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://dev.mysql.com/doc/refman/8.0/en/mysql-indexes.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("8.3.1 How MySQL Uses Indexes"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://dev.mysql.com/doc/refman/8.0/en/index-btree-hash.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("8.3.9 Comparison of B-Tree and Hash Indexes"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.cn/post/6876046792056635405",target:"_blank",rel:"noopener noreferrer"}},[t._v("最左前缀原则（依据官方文档）"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.xiaolincoding.com/mysql/index/index_interview.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("索引常见面试题"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=n.exports}}]);